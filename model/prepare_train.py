import pandas as pd


def prepare_train(df: pd.DataFrame) -> pd.DataFrame:
    print('Начало обработки данных')
    df = df[['Уставной капитал (руб)', 'Адрес',
       'Дата рождения Генерального директора', 'ФИО Бенефициара',
       'Основной ОКВЭД', 'Кол-во дополнительных ОКВЭДОВ', 'Кол-во сотрудников',
       'Система налогообложения ', 'Деятельность клиента',
       'Планируемый оборот по анкете (руб)',
       'Планируемый оборот по снятию д/с (руб)', 'Доходы (тыс, руб.)', 'ЗСК',
       'Негативная информация', 'Негатив относительно ГД', 'Мошенники',
       'Сервисы регистраторы',
       'Срок жизни SIM-карты/номера (количество дней/часов/минут, которое прошло от даты заключения договора)',
       'Налоговая нагрузка']]
    df = df[~df['ЗСК'].isna()]
    df['Адрес'].nunique()
    df['Адрес'] = df['Адрес'].str.split(',').str[0].astype('category')
    df['Год рождения Генерального директора'] = df['Дата рождения Генерального директора'].astype(str).str[:4].astype(
        int, errors='ignore')
    # Преобразование столбца в формат datetime, игнорируя битые строки
    df['Дата рождения Генерального директора'] = pd.to_datetime(
        df['Дата рождения Генерального директора'],
        errors='coerce',  # Преобразует некорректные значения в NaT
    )

    # Вычисление возраста на 2024 год, игнорируя NaT
    current_year = 2024
    df['Возраст директора'] = current_year - df['Дата рождения Генерального директора'].dt.year
    df.loc[~df['ФИО Бенефициара'].isna(), 'ФИО Бенефициара'] = 1
    df['ФИО Бенефициара'].fillna(0, inplace=True)
    df['Основной ОКВЭД'] = df['Основной ОКВЭД'].str.split('.').str[0].astype('category')
    df['Кол-во дополнительных ОКВЭДОВ'] = pd.to_numeric(
        df['Кол-во дополнительных ОКВЭДОВ'], errors='coerce'
    ).astype('Int64')
    df.loc[~df['Кол-во сотрудников'].isna(), 'Кол-во сотрудников'] = 1
    df['Кол-во сотрудников'].fillna(0, inplace=True)
    df['Система налогообложения '] = df['Система налогообложения '].astype('category')
    df.loc[~df['Негативная информация'].isna(), 'Негативная информация'] = 1
    df['Негативная информация'].fillna(0, inplace=True)
    df.loc[~df['Негатив относительно ГД'].isna(), 'Негатив относительно ГД'] = 1
    df['Негатив относительно ГД'].fillna(0, inplace=True)

    df['Общая негативная информация'] = df['Негативная информация'] | df['Негатив относительно ГД']
    df = df[['Уставной капитал (руб)', 'Адрес', 'ФИО Бенефициара',
             'Основной ОКВЭД', 'Кол-во дополнительных ОКВЭДОВ', 'Кол-во сотрудников',
             'Система налогообложения ', 'ЗСК', 'Мошенники',
             'Сервисы регистраторы',
             'Срок жизни SIM-карты/номера (количество дней/часов/минут, которое прошло от даты заключения договора)',
             'Налоговая нагрузка', 'Доходы (тыс, руб.)',
             'Возраст директора', 'Общая негативная информация']]

    df['ЗСК'] = df['ЗСК'].map({1.: 0, 2.: 1})
    categorical_features = [col for col in df.select_dtypes(include=['category']).columns]

    # Замена NaN в категориальных признаках на "missing"
    for col in categorical_features:
        # Добавляем категорию "missing", если ее нет
        if 'missing' not in df[col].cat.categories:
            df[col] = df[col].cat.add_categories('missing')
        # Заменяем NaN на "missing"
        df[col] = df[col].fillna('missing')
    print('Окончание обработки данных')
    return df


if __name__ == "__main__":
    df = pd.read_excel("data_o.xlsx")
    d1 = prepare(df)
    d1.to_excel("data_o2.xlsx", index=False)